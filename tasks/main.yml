- name: "Read additional vars files {{ proxmox_include_vars_files }}"
  include_vars: "{{ item }}"
  ignore_errors: true
  loop: "{{ proxmox_include_vars_files }}"
  when: proxmox_include_vars_files is defined
- name: Get VM current state
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_host: "{{ proxmox_api_host }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    name: "{{ inventory_hostname }}"
    node: "{{ physical_host }}"
    state: current
    update: false
  register: vm_state
  changed_when: false
  failed_when: false
  delegate_to: localhost
  tags:
    - vm
- name: Create VM if it doesn't exist
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_host: "{{ proxmox_api_host }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    full: true
    name: "{{ inventory_hostname }}"
    node: "{{ physical_host }}"
    clone: "{{ physical_host }}-{{ vm_template }}"
    timeout: 900
  register: vm_create
  delegate_to: localhost
  when: vm_state["msg"] | regex_search("does not exist in cluster")
  tags:
    - vm
- name: Get info of "proxmox_system_storagepool"
  # need to know the type of the storage
  community.general.proxmox_storage_info:
    api_user: "{{ proxmox_user }}"
    api_host: "{{ proxmox_api_host }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    storage: "{{ proxmox_storagepool }}"
  delegate_to: localhost
  register: proxmox_system_storagepool_info
- name: wait till VM is available under the new name
  pause:
    seconds: 10
  when: vm_create.changed
  tags:
    - vm
- name: Get VM current state after creating
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_host: "{{ proxmox_api_host }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    name: "{{ inventory_hostname }}"
    state: current
  register: vm_state
  changed_when: false
  failed_when: false
  delegate_to: localhost
  tags:
    - vm
- name: Resize root disk
  shell:
    cmd: "qm resize {{ vm_state['vmid'] }} scsi0 {{ vm_disksize }} && sync"
  delegate_to: "{{ physical_host }}"
  when: vm_create.changed
  tags:
    - vm
    - disks
- name: Get storage types
  community.general.proxmox_storage_info:
    api_user: "{{ proxmox_user }}"
    api_host: "{{ proxmox_api_host }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    storage: "{{ item.storagepool | default (proxmox_storagepool) }}"
  delegate_to: localhost
  register: all_storages
  loop:
    - "{{ vm_additional_disks }}"
- name: create new list of additional disks with storage types
  set_fact:
    vm_additional_disks_storagetypes: "{{ vm_additional_disks_storagetypes | default([]) + [ item.item | combine({'storagetype': item.proxmox_storages[0].type}) ] }}"
  with_items: "{{ all_storages.results }}"
- set_fact:
    vm_additional_disks: "{{ vm_additional_disks_storagetypes }}"
- name: Add additional disks
  block:
    - name: Create additional disks (on LVM storage)
      # this is a workaround because the proxmox-disk-module does not
      # allow to specify the filename nor does it report it
      shell:
        cmd: "pvesm alloc {{ item.storagepool | default (proxmox_storagepool) }} {{ vm_state['vmid'] }} vm-{{ vm_state['vmid'] }}-disk-{{ item.id }} {{ item.disksize }}"
      delegate_to: "{{ physical_host }}"
      with_items:
        - "{{ vm_additional_disks }}"
      when:
        - item.storagetype == "lvm"
    - name: Format additional disks (on LVM storage)
      filesystem:
        fstype: "{{ item.filesystem | default('ext4') }}"
        dev: "/dev/{{ item.storagepool | default(proxmox_storagepool) }}/vm-{{ vm_state['vmid'] }}-disk-{{ item.id }}"
        opts: "{{ item.mkfs_options | default('') }}"
      delegate_to: "{{ physical_host }}"
      with_items:
        - "{{ vm_additional_disks }}"
      when:
        - item.storagetype == "lvm"
    - name: Create additional disks (on Btrfs storage)
      # this is a workaround because the proxmox-disk-module does not
      # allow to specify the filename nor does it report it
      shell:
        cmd: "pvesm alloc {{ item.storagepool | default (proxmox_storagepool) }} {{ vm_state['vmid'] }} vm-{{ vm_state['vmid'] }}-disk-{{ item.id }}.raw {{ item.disksize }}"
      delegate_to: "{{ physical_host }}"
      with_items:
        - "{{ vm_additional_disks }}"
      when:
        - item.storagetype == "btrfs"
    - name: Format additional disks (on Btrfs storage)
      filesystem:
        fstype: "{{ item.filesystem | default('ext4') }}"
        # fixme: use item.path
        dev: "{{ proxmox_system_storagepool_info.proxmox_storages[0].path }}/images/{{ vm_state['vmid'] }}/vm-{{ vm_state['vmid'] }}-disk-{{ item.id }}/disk.raw"
        opts: "{{ item.mkfs_options | default('') }}"
      delegate_to: "{{ physical_host }}"
      with_items:
        - "{{ vm_additional_disks }}"
      when:
        - item.storagetype == "btrfs"
    - name: add disk to VM (from LVM storages)
      lineinfile:
        path: "/etc/pve/qemu-server/{{ vm_state['vmid'] }}.conf"
        regexp: '^scsi{{ item.id }}:.*$'
        line: "scsi{{ item.id }}: {{ item.storagepool | default(proxmox_storagepool) }}:vm-{{ vm_state['vmid'] }}-disk-{{ item.id }},size={{ vm_disksize }}"
      delegate_to: "{{ physical_host }}"
      with_items:
        - "{{ vm_additional_disks }}"
      when:
        - item.storagetype == "lvm"
    - name: add disk to VM (from btrfs storages)
      lineinfile:
        path: "/etc/pve/qemu-server/{{ vm_state['vmid'] }}.conf"
        regexp: '^scsi{{ item.id }}:.*$'
        line: "scsi{{ item.id }}: {{ item.storagepool | default(proxmox_storagepool) }}:{{ vm_state['vmid'] }}/vm-{{ vm_state['vmid'] }}-disk-{{ item.id }}.raw,size={{ vm_disksize }}"
      delegate_to: "{{ physical_host }}"
      with_items:
        - "{{ vm_additional_disks }}"
      when:
        - item.storagetype == "btrfs"
  when:
    - vm_create.changed
    - vm_additional_disks is defined
  tags:
    - vm
    - disks
- name: Gather data about additional disks
  block:
    - name: Fetch UUID (LVM storages)
      command: "blkid -s UUID -o value /dev/{{ item.storagepool | default(proxmox_storagepool) }}/vm-{{ vm_state['vmid'] }}-disk-{{ item.id }}"
      register: lvm_uuids
      delegate_to: "{{ physical_host }}"
      with_items:
        - "{{ vm_additional_disks }}"
      when:
        - item.storagetype == "lvm"
    - name: append to list of additional disks with uuids
      set_fact:
        vm_additional_disks_uuid: "{{ vm_additional_disks_uuid | default([]) + [ item.item | combine({'uuid': item.stdout}) ] }}"
      loop:
        "{{ lvm_uuids.results }}"
      when: lvm_uuids.changed
    - name: Fetch UUID (Btrfs storages)
      command: "blkid -s UUID -o value {{ all_storages.results[0].proxmox_storages[0].path }}/images/{{ vm_state['vmid'] }}/vm-{{ vm_state['vmid'] }}-disk-{{ item.id }}/disk.raw"
      register: btrfs_uuids
      delegate_to: "{{ physical_host }}"
      with_items:
        - "{{ vm_additional_disks }}"
      when:
        - item.storagetype == "btrfs"
    - name: create new list of additional disks with uuids
      set_fact:
        vm_additional_disks_uuid: "{{ vm_additional_disks_uuid | default([]) + [ item.item | combine({'uuid': item.stdout}) ] }}"
      loop:
        "{{ btrfs_uuids.results }}"
      when: btrfs_uuids.changed == true
    - name: create new list of additional disks with uuids
      set_fact:
        vm_additional_disks: "{{ vm_additional_disks_uuid }}"
      when: (lvm_uuids.changed == true) or (btrfs_uuids.changed == true)
  when:
    - vm_additional_disks is defined
  tags:
    - vm
    - disks
- name: Add basic VM config
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_host: "{{ proxmox_api_host }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    vmid: "{{ vm_state['vmid'] }}"
    name: "{{ inventory_hostname }}"
    cores: "{{ vm_cores }}"
    memory: "{{ vm_memory }}"
    searchdomains: "{{ vm_search_domain }}"
    agent: "{{ vm_enable_guest_agent }}"
    sshkeys: "{{ ssh_keys_admins }}"
    ciuser: " {{ admin_user }}"
    cipassword: " {{ admin_user_password }}"
    node: "{{ physical_host }}"
    onboot: "yes"
    update: true
  delegate_to: localhost
  tags:
    - vm
- name: add serial to VM
  lineinfile:
    path: "/etc/pve/qemu-server/{{ vm_state['vmid'] }}.conf"
    regexp: '^args:.*$'
    line: "args: -serial unix:/var/run/qemu-server/{{ vm_state['vmid'] }}.serial,server,nowait"
  delegate_to: "{{ physical_host }}"
  tags:
    - vm
    - cloudinit
- name: add cloudinit to VM (LVM)
  lineinfile:
    path: "/etc/pve/qemu-server/{{ vm_state['vmid'] }}.conf"
    regexp: '^ide2:.*$'
    line: "ide2: {{ proxmox_system_storagepool }}:vm-{{ vm_state['vmid'] }}-cloudinit"
  delegate_to: "{{ physical_host }}"
  when:
    - proxmox_system_storagepool_info.proxmox_storages[0].type == "lvm"
    - vm_create.changed
- name: add cloudinit to VM (Btrfs)
  lineinfile:
    path: "/etc/pve/qemu-server/{{ vm_state['vmid'] }}.conf"
    regexp: '^ide2:.*$'
    line: "ide2: {{ proxmox_system_storagepool }}:{{ vm_state['vmid'] }}/vm-{{ vm_state['vmid'] }}-cloudinit.qcow2"
  when: 
    - proxmox_system_storagepool_info.proxmox_storages[0].type == "btrfs"
    - vm_create.changed
  delegate_to: "{{ physical_host }}"
  tags:
    - vm
    - cloudinit
- name: set bootorder of VM
  lineinfile:
    path: "/etc/pve/qemu-server/{{ vm_state['vmid'] }}.conf"
    regexp: '^boot:.*$'
    line: "boot: order=scsi0"
  delegate_to: "{{ physical_host }}"
  when: vm_create.changed
  tags:
    - vm
- name: print VM mac address
  debug:
    msg: "VM MAC: {{ vm_mac_address }}"
- name: "set macaddress for new VM"
  # not possible via API https://github.com/ansible-collections/community.general/issues/1342
  lineinfile:
    path: "/etc/pve/qemu-server/{{ vm_state['vmid'] }}.conf"
    regexp: '^net0:.*$'
    line: 'net0: virtio={{ vm_mac_address }},bridge=vmbr0,firewall=1'
  delegate_to: "{{ physical_host }}"
  tags:
    - vm
    - network

- name: start VM
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_host: "{{ proxmox_api_host }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    name: "{{ inventory_hostname }}"
    state: started
  register: vm_started
  delegate_to: localhost
  delay: 60
  retries: 5
  tags:
    - vm
- name: wait for VM to boot
  wait_for_connection:
    timeout: 600
  when: vm_started.changed
  tags:
    - vm
- name: gather facts of VM
  gather_facts:
  retries: 6
  delay: 10
- name: Use additional disks
  block:
    - name: create mountpoint
      file:
        path: "{{ item.mountpoint }}"
        state: directory
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0755') }}"
      with_items:
        - "{{ vm_additional_disks }}"
    - name: mount additinal data disk
      mount:
        path: "{{ item.mountpoint }}"
        src: "UUID={{ item.uuid }}"
        fstype: "{{ item.filesystem | default('ext4')}}"
        opts: "{{ item.mount_options | default('defaults') }}"
        state: mounted
      with_items:
        - "{{ vm_additional_disks }}"
  when: vm_additional_disks is defined
  tags:
    - vm
    - disks
- name: install guest agent
  package:
    name: qemu-guest-agent
  retries: 15
  delay: 20
  when: vm_enable_guest_agent == true
  tags:
    - guest-agent
    - agent
- name: activate guest agent service (multi-user.target)
  file:
    dest: /etc/systemd/system/multi-user.target.wants/qemu-guest-agent.service
    src: /usr/lib/systemd/system/qemu-guest-agent.service
    state: link
  when:
    - vm_enable_guest_agent == true
    - ansible_distribution == 'Debian'
  tags:
    - guest-agent
    - agent
- name: activate guest agent service
  systemd:
    daemon-reload: yes
    name: qemu-guest-agent
    enabled: yes
    state: started
  when: vm_enable_guest_agent == true
  tags:
    - guest-agent
    - agent
- name: activate swap
  include_role:
    name: ansible-role-swap
  when: swap_file_state == "present"
  tags:
    - swap
